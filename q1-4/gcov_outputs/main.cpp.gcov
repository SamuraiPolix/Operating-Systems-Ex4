        -:    0:Source:main.cpp
        -:    1:#include "euler_circuit.hpp"
        -:    2:
        -:    3:/*
        -:    4:1. Create a Graph Data structure (you may use same data structure as ex.3) (10 pts)
        -:    5:2. Implement an Algorithm to find Euler circle (Euler circuit) on the graph or prove one does not exist. (10 pts)
        -:    6:3. Generate Random graph and run the algorithm on it. Receive parameters
        -:    7:    (number of edges, number of vertices, random seed) using argc,argv with getopt(3) - same as ex.1 (10 pts)
        -:    8:4. Provide code coverage reports, gprof, Valgrind/memcheck report and Valgrind callGraph for your code, (20 pts)
        -:    9: */
        -:   10:
        6:   11:int main(int argc, char* argv[]) {
        -:   12:    // Default values for command-line arguments
        6:   13:    int num_vertices = 0;
        6:   14:    int num_edges = 0;
        6:   15:    unsigned int seed = time(0);
        -:   16:
        -:   17:    // Parse command-line arguments using getopt
        -:   18:    int opt;
       21:   19:    while ((opt = getopt(argc, argv, "n:e:s:")) != -1) {
       16:   20:        switch (opt) {
        5:   21:            case 'n':
        5:   22:                num_vertices = atoi(optarg);
        5:   23:                break;
        5:   24:            case 'e':
        5:   25:                num_edges = atoi(optarg);
        5:   26:                break;
        5:   27:            case 's':
        5:   28:                seed = (unsigned int)atoi(optarg);
        5:   29:                break;
        1:   30:            default:
        1:   31:                std::cerr << "Usage: " << argv[0] << " -n num_vertices -e num_edges -s seed" << std::endl;
        1:   32:                return 1;
        -:   33:        }
        -:   34:    }
        -:   35:
        -:   36:    // Validate the number of vertices and edges
        5:   37:    if (num_vertices <= 0) {
        1:   38:        std::cerr << "Number of vertices must be positive." << std::endl;
        1:   39:        std::cerr << "Usage: " << argv[0] << " -n num_vertices -e num_edges -s seed" << std::endl;
        1:   40:        return 1;
        -:   41:    }
        -:   42:
        4:   43:    int max_edges = num_vertices * (num_vertices - 1) / 2;
        4:   44:    if (num_edges > max_edges) {
        1:   45:        std::cerr << "Too many edges for the number of vertices." << std::endl;
        1:   46:        std::cerr << "Usage: " << argv[0] << " -n num_vertices -e num_edges -s seed" << std::endl;
        1:   47:        return 1;
        -:   48:    }
        -:   49:
        3:   50:    if (num_edges < 0) {
        1:   51:        std::cerr << "Number of edges cannot be negative." << std::endl;
        1:   52:        std::cerr << "Usage: " << argv[0] << " -n num_vertices -e num_edges -s seed" << std::endl;
        1:   53:        return 1;
        -:   54:    }
        -:   55:
        -:   56:    // Create the graph with the specified number of vertices
        4:   57:    Graph graph(num_vertices);
        -:   58:
        -:   59:    // Task 3: Generate Random Graph and Run the Algorithm
        -:   60:    // The random graph is generated based on the input parameters
        -:   61:
        -:   62:    // Generate random edges for the graph
        2:   63:    graph.generateRandomEdges(num_edges, seed);
        -:   64:
        -:   65:    // #ifdef DEBUG
        -:   66:        // Show graph in GUI
        2:   67:        graph.show();
        -:   68:    // #endif
        -:   69:
        -:   70:    // Find the Euler circuit in the graph
        4:   71:    std::vector<int> circuit = graph.findEulerCircuit();
        -:   72:
        -:   73:    // Output the Euler circuit or indicate if it doesn't exist
        2:   74:    graph.printEulerCircuit(circuit);
        -:   75:
        -:   76:    // MORE TESTS TO COVER ALL EULER CODE
        -:   77:    // Test 1: Graph with no edges
        4:   78:    Graph graph1(5);
        4:   79:    std::vector<int> circuit1 = graph1.findEulerCircuit();
        2:   80:    graph1.printEulerCircuit(circuit1);
        -:   81:
        -:   82:    // Test 2: Graph with Euler circuit
        4:   83:    Graph graph2(5);
        2:   84:    graph2.addEdge(0, 1);
        2:   85:    graph2.addEdge(1, 2);
        2:   86:    graph2.addEdge(1, 3);
        2:   87:    graph2.addEdge(2, 3);
        2:   88:    graph2.addEdge(3, 4);
        2:   89:    graph2.addEdge(4, 0);
        4:   90:    std::vector<int> circuit2 = graph2.findEulerCircuit();
        2:   91:    graph2.printEulerCircuit(circuit2);
        -:   92:
        -:   93:    // Test 3: Graph with no Euler circuit
        4:   94:    Graph graph3(5);
        2:   95:    graph3.addEdge(0, 1);
        2:   96:    graph3.addEdge(1, 2);
        2:   97:    graph3.addEdge(1, 3);
        2:   98:    graph3.addEdge(2, 3);
        2:   99:    graph3.addEdge(3, 4);
        4:  100:    std::vector<int> circuit3 = graph3.findEulerCircuit();
        2:  101:    graph3.printEulerCircuit(circuit3);
        -:  102:
        -:  103:    // Test 4: Graph that is not connected
        4:  104:    Graph graph4(5);
        2:  105:    graph4.addEdge(0, 1);
        2:  106:    graph4.addEdge(1, 2);
        2:  107:    graph4.addEdge(3, 4);
        4:  108:    std::vector<int> circuit4 = graph4.findEulerCircuit();
        2:  109:    graph4.printEulerCircuit(circuit4);
        -:  110:
        -:  111:    // Test 5: Euler circuit  - connected with even degree vertices
        4:  112:    Graph graph5(5);
        2:  113:    graph5.addEdge(0, 1);
        2:  114:    graph5.addEdge(1, 2);
        2:  115:    graph5.addEdge(2, 3);
        2:  116:    graph5.addEdge(3, 4);
        2:  117:    graph5.addEdge(4, 0);
        2:  118:    std::vector<int> circuit5 = graph5.findEulerCircuit();
        2:  119:    graph5.printEulerCircuit(circuit5);
        -:  120:
        2:  121:    return 0;
        -:  122:}
